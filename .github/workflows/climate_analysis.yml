name: Urban Climate Resilience Analysis

on:
  schedule:
    # Run daily at 2 AM UTC (adjust for your timezone)
    - cron: '0 2 * * *'
  # Also allow manual triggers
  workflow_dispatch:
  # Run on pushes to main branch
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - 'requirements.txt'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  climate-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hours max
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4  # ✅ Updated to v4 (latest)
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5  # ✅ Updated to v5 (latest)
      with:
        python-version: '3.11'  # ✅ Updated to Python 3.11 for better performance
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gfortran libopenblas-dev
        # Remove problematic emoji fonts that cause matplotlib issues
        sudo apt-get remove -y fonts-noto-color-emoji || true
    
    - name: Cache pip dependencies
      uses: actions/cache@v4  # ✅ Updated to v4 (latest with new cache service)
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        # Install additional packages for GitHub Actions
        pip install psutil
    
    - name: Create results directory
      run: |
        mkdir -p results/$(date +%Y-%m-%d)
        echo "RESULTS_DIR=results/$(date +%Y-%m-%d)" >> $GITHUB_ENV
    
    - name: Run automated climate analysis
      run: |
        # Set matplotlib backend before running
        export MPLBACKEND=Agg
        export MPLCONFIGDIR=/tmp
        # Limit threads for memory efficiency
        export OMP_NUM_THREADS=2
        export MKL_NUM_THREADS=2
        python auto_run.py 2>&1 | tee ${{ env.RESULTS_DIR }}/execution_log.txt
      env:
        # Set environment variables for GitHub Actions
        GITHUB_ACTIONS: true
        PYTHONPATH: ${{ github.workspace }}
      timeout-minutes: 60  # Shorter timeout to prevent hanging
    
    - name: Collect results
      run: |
        # Move generated files to results directory
        find . -name "*.png" -exec mv {} ${{ env.RESULTS_DIR }}/ \; 2>/dev/null || true
        mv debug_log.txt ${{ env.RESULTS_DIR }}/ 2>/dev/null || true
        mv error_state.json ${{ env.RESULTS_DIR }}/ 2>/dev/null || true
        
        # Create summary report
        echo "# Climate Analysis Results - $(date)" > ${{ env.RESULTS_DIR }}/README.md
        echo "" >> ${{ env.RESULTS_DIR }}/README.md
        echo "## Execution Summary" >> ${{ env.RESULTS_DIR }}/README.md
        echo "- **Date**: $(date)" >> ${{ env.RESULTS_DIR }}/README.md
        echo "- **Status**: $([ -f ${{ env.RESULTS_DIR }}/epidemic_dynamics_baseline.png ] && echo 'SUCCESS ✅' || echo 'PARTIAL/FAILED ❌')" >> ${{ env.RESULTS_DIR }}/README.md
        echo "- **Generated Files**: $(ls -1 ${{ env.RESULTS_DIR }}/*.png 2>/dev/null | wc -l) plots" >> ${{ env.RESULTS_DIR }}/README.md
        echo "- **Runner**: ${{ runner.os }} (${{ runner.arch }})" >> ${{ env.RESULTS_DIR }}/README.md
        echo "" >> ${{ env.RESULTS_DIR }}/README.md
        echo "## Generated Visualizations" >> ${{ env.RESULTS_DIR }}/README.md
        for file in ${{ env.RESULTS_DIR }}/*.png; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "- ![${filename}](${filename})" >> ${{ env.RESULTS_DIR }}/README.md
          fi
        done
    
    - name: Upload results as artifacts
      uses: actions/upload-artifact@v4  # ✅ Updated to v4 (latest, much faster uploads)
      with:
        name: climate-analysis-results-${{ github.run_number }}
        path: results/
        retention-days: 30
        compression-level: 6  # ✅ New v4 feature for optimized compression
    
    - name: Commit and push results
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add results/
        git diff --staged --quiet || git commit -m "🤖 Automated climate analysis results - $(date '+%Y-%m-%d %H:%M')"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create issue on failure
      if: failure()
      uses: actions/github-script@v7  # ✅ Updated to v7 (latest)
      with:
        script: |
          github.rest.issues.create({  // ✅ Updated syntax for v7 (github.rest.* instead of github.*)
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Climate Analysis Failed - ' + new Date().toISOString().split('T')[0],
            body: `The automated climate analysis failed on ${new Date().toISOString()}.
            
            **Run Details:**
            - Run ID: ${{ github.run_id }}
            - Run Number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Workflow: ${{ github.workflow }}
            - Runner: ${{ runner.os }} (${{ runner.arch }})
            
            **Logs:**
            - [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - Check the uploaded artifacts for debug_log.txt and error_state.json
            
            Please investigate the failure and take appropriate action.`
          })
